// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`forward className 1`] = `
"({
  className
}) => create(\\"div\\", {
  \\"className\\": className
}, create(\\"div\\", {}, \\"Hello World\\"));"
`;

exports[`forward className 2`] = `
"({
  className
}) => <div className={className}><div>Hello World</div></div>;"
`;

exports[`forward react ref 1`] = `
"forwardRef(({
  active
}, ref) => create(\\"input\\", {
  \\"disabled\\": !active,
  \\"ref\\": ref,
  \\"type\\": \\"text\\",
  \\"className\\": \\"input_5iq\\"
}));
Styles.include(\`
	.input_5iq { color: red }
\`);"
`;

exports[`forward react ref 2`] = `
"forwardRef(({
  active
}, ref) => <input disabled={!active} ref={ref} type=\\"text\\" className=\\"input_5iq\\" />);
Styles.include(\`
	.input_5iq { color: red }
\`);"
`;

exports[`forward will join with existing styles 1`] = `
"({
  className
}) => create(\\"div\\", {
  \\"className\\": join(\\"element_4q3\\", className)
}, create(\\"div\\", {}, \\"Hello World\\"));

Styles.include(\`
	.element_4q3 { color: red }
\`);"
`;

exports[`forward will join with existing styles 2`] = `
"({
  className
}) => <div className={join(\\"element_4q3\\", className)}><div>Hello World</div></div>;

Styles.include(\`
	.element_4q3 { color: red }
\`);"
`;

exports[`forward will not break where ...rest exists 1`] = `
"({
  className,
  name,
  ...rest
}) => create(\\"div\\", {
  \\"className\\": className
}, create(\\"div\\", Object.assign({}, rest), \\"Hello \\", name));"
`;

exports[`forward will not break where ...rest exists 2`] = `
"({
  className,
  name,
  ...rest
}) => <div className={className}><div {...rest}>Hello {name}</div></div>;"
`;

exports[`forward will pull className from declared destructure 1`] = `
"props => {
  const {
    className,
    name
  } = props;
  return create(\\"div\\", {
    \\"className\\": className
  }, create(\\"div\\", {}, \\"Hello \\", name));
};"
`;

exports[`forward will pull className from declared destructure 2`] = `
"props => {
  const {
    className,
    name
  } = props;
  return <div className={className}><div>Hello {name}</div></div>;
};"
`;

exports[`forward will pull className from existing destructure 1`] = `
"({
  className,
  name
}) => create(\\"div\\", {
  \\"className\\": className
}, create(\\"div\\", {}, \\"Hello \\", name));"
`;

exports[`forward will pull className from existing destructure 2`] = `
"({
  className,
  name
}) => <div className={className}><div>Hello {name}</div></div>;"
`;

exports[`forward will pull className from existing props 1`] = `
"props => {
  const {
    className
  } = props;
  return create(\\"div\\", {
    \\"className\\": className
  }, create(\\"div\\", {}, \\"Hello World\\"));
};"
`;

exports[`forward will pull className from existing props 2`] = `
"props => {
  const {
    className
  } = props;
  return <div className={className}><div>Hello World</div></div>;
};"
`;
